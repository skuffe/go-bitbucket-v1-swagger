openapi: 3.0.0
info:
  title: API
  description: Provides REST resources
  contact: {}
  version: "1.0"
servers:
- url: http://example.com/rest/
paths:
  /api/1.0/users/{userSlug}/settings:
    get:
      summary: getUserSettings
      description: |-
        Retrieve a map of user setting key values for a specific user identified by the user slug.
         <p>
      operationId: getUserSettings
      parameters:
      - name: userSlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: updateSettings
      description: |-
        Update the entries of a map of user setting key/values for a specific user identified by the user slug.
         <p>
      operationId: updateSettings
      parameters:
      - name: userSlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSettingsRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path:.*}:
    get:
      summary: streamDiff
      description: |-
        Gets a diff of the changes available in the {@code from} commit but not in the {@code to} commit.
         <p>
         If either the {@code from} or {@code to} commit are not specified, they will be replaced by the
         default branch of their containing repository.
      operationId: streamDiff
      parameters:
      - name: from
        in: query
        description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: to
        in: query
        description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fromRepo
        in: query
        description: |-
          an optional parameter specifying the source repository containing the source commit
                           if that commit is not present in the current repository; the repository can be specified
                           by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by
                           a slash: <em>fromRepo=projectKey/repoSlug</em>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: contextLines
        in: query
        description: an optional number of context lines to include around each added
          or removed lines in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: whitespace
        in: query
        description: an optional whitespace flag which can be set to <code>ignore-all</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: path
        description: the path to the file to diff (optional)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/commits:
    get:
      summary: streamCommits
      description: |-
        Gets the commits accessible from the {@code from} commit but not in the {@code to} commit.
         <p>
         If either the {@code from} or {@code to} commit are not specified, they will be replaced by the
         default branch of their containing repository.
      operationId: streamCommits
      parameters:
      - name: from
        in: query
        description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: to
        in: query
        description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fromRepo
        in: query
        description: |-
          an optional parameter specifying the source repository containing the source commit
                           if that commit is not present in the current repository; the repository can be specified
                           by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by
                           a slash: <em>fromRepo=projectKey/repoSlug</em>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/compare/changes:
    get:
      summary: streamChanges
      description: |-
        Gets the file changes available in the {@code from} commit but not in the {@code to} commit.
         <p>
         If either the {@code from} or {@code to} commit are not specified, they will be replaced by the
         default branch of their containing repository.
      operationId: streamChanges
      parameters:
      - name: from
        in: query
        description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: to
        in: query
        description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fromRepo
        in: query
        description: |-
          an optional parameter specifying the source repository containing the source commit
                           if that commit is not present in the current repository; the repository can be specified
                           by either its ID <em>fromRepo=42</em> or by its project key plus its repo slug separated by
                           a slash: <em>fromRepo=projectKey/repoSlug</em>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/archive:
    get:
      summary: getArchive
      description: |-
        Streams an archive of the repository's contents at the requested commit. If no <code>at=</code> commit is
         requested, an archive of the default branch is streamed.
         <p>
         The <code>filename=</code> query parameter may be used to specify the exact filename to include in the
         <code>"Content-Disposition"</code> header. If an explicit filename is not provided, one will be automatically
         generated based on what is being archived. Its format depends on the <code>at=</code> value:
         <ul>
             <li>No <code>at=</code> commit:
             <code>&lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;</code>;
             e.g. example-master@43c2f8a0fe8.zip</li>
             <li><code>at=sha</code>: <code>&lt;slug&gt;-&lt;at&gt;.&lt;format&gt;</code>; e.g.
             example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz</li>
             <li><code>at=branchOrTag</code>: <code>&lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;</code>;
             e.g. example-feature@bbb225f16e1.tar
             <ul>
                 <li>If the branch or tag is qualified (e.g. <code>refs/heads/master</code>, the short name
                 (<code>master</code>) will be included in the filename</li>
                 <li>If the branch or tag's <i>short name</i> includes slashes (e.g. <code>release/4.6</code>),
                 they will be converted to hyphens in the filename (<code>release-4.5</code>)</li>
             </ul>
             </li>
         </ul>
         <p>
         Archives may be requested in the following formats by adding the <code>format=</code> query parameter:
         <ul>
             <li><code>zip</code>: A zip file using standard compression (Default)</li>
             <li><code>tar</code>: An uncompressed tarball</li>
             <li><code>tar.gz</code> or <code>tgz</code>: A GZip-compressed tarball</li>
         </ul>
         The contents of the archive may be filtered by using the <code>path=</code> query parameter to specify paths to
         include. <code>path=</code> may be specified multiple times to include multiple paths.
         <p>
         The <code>prefix=</code> query parameter may be used to define a directory (or multiple directories) where
         the archive's contents should be placed. If the prefix does not end with <code>/</code>, one will be added
         automatically. The prefix is <i>always</i> treated as a directory; it is not possible to use it to prepend
         characters to the entries in the archive.
         <p>
         Archives of public repositories may be streamed by any authenticated or anonymous user. Streaming archives for
         non-public repositories requires an <i>authenticated user</i> with at least <b>REPO_READ</b> permission.
      operationId: getArchive
      parameters:
      - name: at
        in: query
        description: the commit to stream an archive of; if not supplied, an archive
          of the default branch is streamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filename
        in: query
        description: a filename to include the "Content-Disposition" header
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: format
        in: query
        description: 'the format to stream the archive in; must be one of: zip, tar,
          tar.gz or tgz'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: paths to include in the streamed archive; may be repeated to
          include multiple paths
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: prefix
        in: query
        description: |-
          a prefix to apply to all entries in the streamed archive; if the supplied prefix does not end
                           with a trailing <code>/</code>, one will be added automatically
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream; application/x-tar:
              schema:
                type: string
                x-content-type: application/octet-stream; application/x-tar
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/branches:
    get:
      summary: getBranches
      description: |-
        Retrieve the branches matching the supplied <strong>filterText</strong> param.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getBranches
      parameters:
      - name: base
        in: query
        description: base branch or tag to compare each branch to (for the metadata
          providers that uses that information)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: details
        in: query
        description: whether to retrieve plugin-provided metadata about each branch
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: filterText
        in: query
        description: the text to match on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orderBy
        in: query
        description: ordering of refs either ALPHABETICAL (by name) or MODIFICATION
          (last updated)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createBranch
      description: |-
        Creates a branch using the information provided in the {@link RestCreateBranchRequest request}
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call
         this resource.
      operationId: createBranch
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBranchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/branches/default:
    get:
      summary: getDefaultBranch
      description: |-
        Get the default branch of the repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getDefaultBranch
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setDefaultBranch
      description: |-
        Update the default branch of a repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: setDefaultBranch
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setDefaultBranchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/diff:
    get:
      summary: streamDiff
      description: |-
        Retrieve the diff for a specified file path between two provided revisions.
         <p>
         <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap
         to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event
         that the cap is reached, the diff will be cut short and one or more <code>truncated</code> flags will be set to
         <code>true</code> on the segments, hunks and diffs substructures in the returned JSON response.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetstreamDiff
      parameters:
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: since
        in: query
        description: the base revision to diff from. If omitted the parent revision
          of the until revision is used
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the source path for the file, if it was copied, moved or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: until
        in: query
        description: the target revision to diff to (required)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to <code>ignore-all</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/diff/{path:.*}:
    get:
      summary: streamDiff
      description: |-
        Retrieve the diff for a specified file path between two provided revisions.
         <p>
         <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap
         to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event
         that the cap is reached, the diff will be cut short and one or more <code>truncated</code> flags will be set to
         <code>true</code> on the segments, hunks and diffs substructures in the returned JSON response.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetstreamDiff1
      parameters:
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: since
        in: query
        description: the base revision to diff from. If omitted the parent revision
          of the until revision is used
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the source path for the file, if it was copied, moved or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: until
        in: query
        description: the target revision to diff to (required)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to <code>ignore-all</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: path
        description: the path to the file which should be diffed (required)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/mail-server:
    get:
      summary: getMailConfig
      description: |-
        Retrieves the current mail configuration.

         The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: getMailConfig
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setMailConfig
      description: |-
        Updates the mail configuration

         The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: setMailConfig
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setMailConfigRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteMailConfig
      description: |-
        Deletes the current mail configuration.
         <p>
         The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: deleteMailConfig
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/mail-server/sender-address:
    get:
      summary: getSenderAddress
      description: Retrieves the server email address
      operationId: getSenderAddress
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setSenderAddress
      description: |-
        Updates the server email address

         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: setSenderAddress
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setSenderAddressRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: clearSenderAddress
      description: |-
        Clears the server email address.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: clearSenderAddress
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks:
    get:
      summary: getRepositoryHooks
      description: |-
        Retrieve a page of repository hooks for this repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getRepositoryHooks
      parameters:
      - name: type
        in: query
        description: the optional type to filter by. Valid values are <code>PRE_RECEIVE</code>
          or <code>POST_RECEIVE</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings:
    get:
      summary: getSettings
      description: |-
        Retrieve the settings for a repository hook for this repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getSettings
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    put:
      summary: setSettings
      description: |-
        Modify the settings for a repository hook for this repository.
         <p>
         The service will reject any settings which are too large, the current limit is 32KB once serialized.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
         <p>
         A JSON document can be provided to use as the settings for the hook. These structure and validity of the document
         is decided by the plugin providing the hook.
      operationId: setSettings
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setSettingsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled:
    put:
      summary: enableHook
      description: |-
        Enable a repository hook for this repository and optionally apply new configuration.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
         <p>
         A JSON document may be provided to use as the settings for the hook. These structure and validity of
         the document is decided by the plugin providing the hook.
      operationId: enableHook
      parameters:
      - name: Content-Length
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 0
          default: 0
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    delete:
      summary: disableHook
      description: |-
        Disable a repository hook for this repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: disableHook
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}:
    get:
      summary: getRepositoryHook
      description: |-
        Retrieve a repository hook for this repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getRepositoryHook
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteRepositoryHook
      description: |-
        Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: deleteRepositoryHook
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/files:
    get:
      summary: streamFiles
      description: |-
        Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files
         from any sub-directory of the specified directory will be returned.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: streamFiles
      parameters:
      - name: at
        in: query
        description: |-
          the commit ID or ref (e.g. a branch or tag) to list the files at.
                       If not specified the default branch will be used instead.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/files/{path:.*}:
    get:
      summary: streamFiles
      description: |-
        Retrieve a page of files from particular directory of a repository. The search is done recursively, so all files
         from any sub-directory of the specified directory will be returned.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetstreamFiles
      parameters:
      - name: at
        in: query
        description: |-
          the commit ID or ref (e.g. a branch or tag) to list the files at.
                       If not specified the default branch will be used instead.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: path
        description: the directory to list files for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes:
    get:
      summary: streamChanges
      description: |-
        Gets changes for the specified PullRequest.
         <p>
         If the {@code changeScope} query parameter is set to {@code unreviewed}, the application will attempt to stream
         unreviewed changes based on the {@code lastReviewedCommit} of the current user, which are the changes between the
         {@code lastReviewedCommit} and the latest commit of the source branch. The current user is considered to
         <i>not</i> have any unreviewed changes for the pull request when the {@code lastReviewedCommit} is either
         {@code null} (everything is unreviewed, so all changes are streamed), equal to the latest commit of the source
         branch (everything is reviewed), or no longer on the source branch (the source branch has been rebased). In these
         cases, the application will fall back to streaming all changes (the default), which is the effective diff for the
         pull request. The type of changes streamed can be determined by the {@code changeScope} parameter included in the
         properties map of the response.
         <p>
         Note: This resource is currently <i>not paged</i>. The server will return at most one page. The server will
         truncate the number of changes to either the request's page limit or an internal maximum, whichever is smaller.
         The start parameter of the page request is also ignored.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: GetstreamChanges
      parameters:
      - name: changeScope
        in: query
        description: |-
          {@code UNREVIEWED} to stream the unreviewed changes for the current user (if they exist);
                              {@code RANGE} to stream changes between two arbitrary commits (requires {@code sinceId} and
                              {@code untilId}); otherwise {@code ALL} to stream all changes (the default)
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: ALL
          default: ALL
      - name: sinceId
        in: query
        description: the since commit hash to stream changes for a {@code RANGE} arbitrary
          change scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: untilId
        in: query
        description: the until commit hash to stream changes for a {@code RANGE} arbitrary
          change scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          {@code true} to apply comment counts in the changes (the default); otherwise, {@code false}
                               to stream changes without comment counts
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve:
    post:
      summary: approve
      description: |-
        Approve a pull request as the current user. Implicitly adds the user as a participant if they are not already.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
         <p>
         <strong>Deprecated since 4.2</strong>. Use
         /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
      operationId: approve
      parameters:
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: withdrawApproval
      description: |-
        Remove approval from a pull request as the current user. This does not remove the user as a participant.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
         <p>
         <strong>Deprecated since 4.2</strong>. Use
         /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug} instead
      operationId: withdrawApproval
      parameters:
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/profile/recent/repos:
    get:
      summary: getRepositoriesRecentlyAccessed
      description: |-
        Retrieve a page of recently accessed repositories for the currently authenticated user.
         <p>
         Repositories are ordered from most recently to least recently accessed.
         <p>
         Only authenticated users may call this resource.
      operationId: getRepositoriesRecentlyAccessed
      parameters:
      - name: permission
        in: query
        description: |-
          (optional) if specified, it must be a valid repository permission level name and will limit
                             the resulting repository list to ones that the requesting user has the specified permission
                             level to. If not specified, the default <code>REPO_READ</code> permission level will be assumed.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/last-modified:
    get:
      summary: stream
      description: |-
        Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications
         are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.
         <p>
         Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
      operationId: stream
      parameters:
      - name: at
        in: query
        description: the commit to use as the starting point when listing files and
          calculating modifications
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path:.*}:
    get:
      summary: stream
      description: |-
        Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications
         are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.
         <p>
         Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
      operationId: Getstream
      parameters:
      - name: at
        in: query
        description: the commit to use as the starting point when listing files and
          calculating modifications
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: path
        description: the path within the repository whose files should be streamed
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/license:
    get:
      summary: get
      description: |-
        Retrieves details about the current license, as well as the current status of the system with regards to the
         installed license. The status includes the current number of users applied toward the license limit, as well
         as any status messages about the license (warnings about expiry or user counts exceeding license limits).
         <p>
         The authenticated user must have <b>ADMIN</b> permission. Unauthenticated users, and non-administrators, are
         not permitted to access license details.
      operationId: get
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: update
      description: |-
        Decodes the provided encoded license and sets it as the active license. If no license was provided, a 400 is
         returned. If the license cannot be decoded, or cannot be applied, a 409 is returned. Some possible reasons a
         license may not be applied include:
         <ul>
             <li>It is for a different product</li>
             <li>It is already expired</li>
         </ul>
         Otherwise, if the license is updated successfully, details for the new license are returned with a 200 response.
         <p>
         <b>Warning</b>: It is possible to downgrade the license during update, applying a license with a lower number
         of permitted users. If the number of currently-licensed users exceeds the limits of the new license, pushing
         will be disabled until the licensed user count is brought into compliance with the new license.
         <p>
         The authenticated user must have <b>SYS_ADMIN</b> permission. <b>ADMIN</b> users may <i>view</i> the current
         license details, but they may not <i>update</i> the license.
      operationId: update
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests:
    get:
      summary: getPullRequests
      description: |-
        Retrieve a page of pull requests in the current repository that contain the given commit.
         <p>
         The user must be authenticated and have access to the specified repository to call this resource.
      operationId: getPullRequests
      parameters:
      - name: commitId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/participants:
    get:
      summary: search
      description: |-
        Retrieve a page of participant users for all the pull requests to or from the specified repository.
         <p>
         <p>
         Optionally clients can specify following filters.
      operationId: search
      parameters:
      - name: direction
        in: query
        description: |-
          (optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified
                            repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: incoming
          default: incoming
      - name: filter
        in: query
        description: |-
          (optional) return only users, whose username, name or email address <i>contain</i>
                            the {@code filter} value
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: role
        in: query
        description: |-
          (optional) The role associated with the pull request participant.
                            This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments:
    get:
      summary: getComments
      description: |-
        Retrieves the commit discussion comments that match the specified search criteria.
         <p>
         It is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the
         {@code sinceId} that the comments anchored from.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit
         is in to call this resource.
      operationId: getComments
      parameters:
      - name: path
        in: query
        description: the path to the file on which comments were made
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: since
        in: query
        description: |-
          For a merge commit, a parent can be provided to specify which diff the comments are on. For
                                a commit range, a {@code sinceId} can be provided to specify where the comments are anchored
                                from.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createComment
      description: |-
        Add a new comment.
         <p>
         Comments can be added in a few places by setting different attributes:
         <p>
         General commit comment:

         <pre>
             {
                 "text": "An insightful general comment on a commit."
             }
             </pre>

         Reply to a comment:

         <pre>
             {
                 "text": "A measured reply.",
                 "parent": {
                     "id": 1
                 }
             }
             </pre>

         General file comment:

         <pre>
             {
                 "text": "An insightful general comment on a file.",
                 "anchor": {
                     "diffType": "COMMIT",
                     "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                     "path": "path/to/file",
                     "srcPath": "path/to/file",
                     "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
                 }
             }
             </pre>

         File line comment:

         <pre>
             {
                 "text": "A pithy comment on a particular line within a file.",
                 "anchor": {
                     "diffType": "COMMIT",
                     "line": 1,
                     "lineType": "CONTEXT",
                     "fileType": "FROM",
                     "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                     "path": "path/to/file",
                     "srcPath": "path/to/file",
                     "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
             }
             }
             </pre>
         <strong>Note: general file comments are an experimental feature and may change in the near future!</strong>
         <p>
         For file and line comments, 'path' refers to the path of the file to which the comment should be applied and
         'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,
         fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment
         was added. Finally diffType refers to the type of diff the comment was added on.
         <p>
         For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to
         the type of diff hunk, which can be:
         <ul>
             <li>'ADDED' - for an added line;</li>
             <li>'REMOVED' - for a removed line; or</li>
             <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>
         </ul>
         'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when
         displaying the diff in a side-by-side way. Currently the supported values are:
         <ul>
             <li>'FROM' - the source file of the diff</li>
             <li>'TO' - the destination file of the diff</li>
         </ul>
         If the current user is not a participant the user is added as one and updated to watch the commit.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit
         is in to call this resource.
      operationId: createComment
      parameters:
      - name: since
        in: query
        description: |-
          For a merge commit, a parent can be provided to specify which diff the comments should be on. For
                           a commit range, a {@code sinceId} can be provided to specify where the comments should be
                           anchored from.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCommentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}:
    get:
      summary: getComment
      description: |-
        Retrieves a commit discussion comment.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit
         is in to call this resource.
      operationId: getComment
      parameters:
      - name: commentId
        in: path
        description: the ID of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateComment
      description: |-
        Update the text of a comment. Only the user who created a comment may update it.
         <p>
         <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match
         the server's version of the comment or the update will fail. To determine the current version of the comment,
         the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the
         returned JSON structure.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit
         is in to call this resource.
      operationId: updateComment
      parameters:
      - name: commentId
        in: path
        description: the ID of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCommentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteComment
      description: |-
        Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>
         and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>,
         regardless of the user's granted permissions.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit
         is in to call this resource.
      operationId: deleteComment
      parameters:
      - name: version
        in: query
        description: |-
          The expected version of the comment. This must match the server's version of the comment or
                            the delete will fail. To determine the current version of the comment, the comment should be
                            fetched from the server prior to the delete. Look for the 'version' attribute in the returned
                            JSON structure.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: commentId
        in: path
        description: the ID of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/raw:
    get:
      summary: streamRaw
      description: |-
        Retrieve the raw content for a file path at a specified revision.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call
         this resource.
      operationId: streamRaw
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
                x-content-type: '*/*'
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/raw/{path:.*}:
    get:
      summary: streamRaw
      description: |-
        Retrieve the raw content for a file path at a specified revision.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call
         this resource.
      operationId: GetstreamRaw
      parameters:
      - name: path
        in: path
        description: the file path to retrieve content from
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: object
                x-content-type: '*/*'
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/groups:
    get:
      summary: getGroupsWithAnyPermission
      description: |-
        Retrieve a page of groups that have been granted at least one permission for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
      operationId: getGroupsWithAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForGroup
      description: |-
        Promote or demote a group's permission level for the specified repository. Available repository permissions are:
         <ul>
             <li>REPO_READ</li>
             <li>REPO_WRITE</li>
             <li>REPO_ADMIN</li>
         </ul>
         See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket
         Server documentation</a> for a detailed explanation of what each permission entails.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource. In addition, a user may not demote a group's permission level if their
         own permission level would be reduced as a result.
      operationId: setPermissionForGroup
      parameters:
      - name: permission
        in: query
        description: the permission to grant
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: the names of the groups
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: revokePermissionsForGroup
      description: |-
        Revoke all permissions for the specified repository for a group.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
         <p>
         In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
      operationId: revokePermissionsForGroup
      parameters:
      - name: name
        in: query
        description: the name of the group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/groups/none:
    get:
      summary: getGroupsWithoutAnyPermission
      description: |-
        Retrieve a page of groups that have no granted permissions for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
      operationId: getGroupsWithoutAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/users:
    get:
      summary: getUsersWithAnyPermission
      description: |-
        Retrieve a page of users that have been granted at least one permission for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
      operationId: getUsersWithAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForUser
      description: |-
        Promote or demote a user's permission level for the specified repository. Available repository permissions are:
         <ul>
             <li>REPO_READ</li>
             <li>REPO_WRITE</li>
             <li>REPO_ADMIN</li>
         </ul>
         See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket
         Server documentation</a> for a detailed explanation of what each permission entails.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource. In addition, a user may not reduce their own permission level unless
         they have a project or global permission that already implies that permission.
      operationId: setPermissionForUser
      parameters:
      - name: name
        in: query
        description: the names of the users
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permission
        in: query
        description: the permission to grant
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: revokePermissionsForUser
      description: |-
        Revoke all permissions for the specified repository for a user.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
         <p>
         In addition, a user may not revoke their own repository permissions if they do not have a higher
         project or global permission.
      operationId: revokePermissionsForUser
      parameters:
      - name: name
        in: query
        description: the name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/permissions/users/none:
    get:
      summary: getUsersWithoutPermission
      description: |-
        Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher
         project or global permission to call this resource.
      operationId: getUsersWithoutPermission
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff:
    get:
      summary: streamDiff
      description: |-
        Streams a diff within a pull request.
         <p>
         If the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to
         produce the correct diff.
         <p>
         Note: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the
         streamed lines, and it is not possible to request subsequent pages if that cap is exceeded.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: GetstreamDiff12
      parameters:
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: diffType
        in: query
        description: |-
          the type of diff being requested. When {@code withComments} is {@code true}
                               this works as a hint to the system to attach the correct set of comments to the diff
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: EFFECTIVE
          default: EFFECTIVE
      - name: sinceId
        in: query
        description: the since commit hash to stream a diff between two arbitrary
          hashes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the previous path to the file, if the file has been copied, moved
          or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: untilId
        in: query
        description: the until commit hash to stream a diff between two arbitrary
          hashes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to <code>ignore-all</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          <code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code>
                               to stream the diff without comments
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path:.*}:
    get:
      summary: streamDiff
      description: |-
        Streams a diff within a pull request.
         <p>
         If the specified file has been copied, moved or renamed, the <code>srcPath</code> must also be specified to
         produce the correct diff.
         <p>
         Note: This RESTful endpoint is currently <i>not paged</i>. The server will internally apply a hard cap to the
         streamed lines, and it is not possible to request subsequent pages if that cap is exceeded.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: GetstreamDiff123
      parameters:
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: diffType
        in: query
        description: |-
          the type of diff being requested. When {@code withComments} is {@code true}
                               this works as a hint to the system to attach the correct set of comments to the diff
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: EFFECTIVE
          default: EFFECTIVE
      - name: sinceId
        in: query
        description: the since commit hash to stream a diff between two arbitrary
          hashes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the previous path to the file, if the file has been copied, moved
          or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: untilId
        in: query
        description: the until commit hash to stream a diff between two arbitrary
          hashes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to <code>ignore-all</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          <code>true</code> to embed comments in the diff (the default); otherwise, <code>false</code>
                               to stream the diff without comments
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: path
        in: path
        description: the path to the file which should be diffed (optional)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/cluster:
    get:
      summary: getInformation
      description: |-
        Gets information about the nodes that currently make up the stash cluster.
         <p>
         The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: getInformation
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants:
    get:
      summary: listParticipants
      description: |-
        Retrieves a page of the participants for a given pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: listParticipants
      parameters:
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: assignParticipantRole
      description: |-
        Assigns a participant to an explicit role in pull request. Currently only the REVIEWER role may be assigned.
         <p>
         If the user is not yet a participant in the pull request, they are made one and assigned the supplied role.
         <p>
         If the user is already a participant in the pull request, their previous role is replaced with the supplied role
         unless they are already assigned the AUTHOR role which cannot be changed and will result in a Bad Request (400)
         response code.
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: assignParticipantRole
      parameters:
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assignParticipantRoleRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: unassignParticipantRole
      description: |-
        Unassigns a participant from the REVIEWER role they may have been given in a pull request.
         <p>
         If the participant has no explicit role this method has no effect.
         <p>
         Afterwards, the user will still remain a participant in the pull request but their role will be reduced to
         PARTICIPANT. This is because once made a participant of a pull request,
         a user will forever remain a participant. Only their role may be altered.
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request
         targets to call this resource.
         <p>
         <strong>Deprecated since 4.2</strong>. Use
         /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}
         instead.
      operationId: unassignParticipantRole
      parameters:
      - name: username
        in: query
        description: the participant's user name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}:
    put:
      summary: updateStatus
      description: |-
        Change the current user's status for a pull request. Implicitly adds the user as a participant if they are not
         already. If the current user is the author, this method will fail.
         <p>
         The possible values for {@code status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or
         <strong>APPROVED</strong>.
         <p>
         If the new {@code status} is <strong>NEEDS_WORK</strong> or <strong>APPROVED</strong> then the
         {@code lastReviewedCommit} for the participant will be updated to the latest commit of the source branch of the
         pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: updateStatus
      parameters:
      - name: userSlug
        in: path
        description: the slug for the user changing their status
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateStatusRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: unassignParticipantRole
      description: |-
        Unassigns a participant from the REVIEWER role they may have been given in a pull request.
         <p>
         If the participant has no explicit role this method has no effect.
         <p>
         Afterwards, the user will still remain a participant in the pull request but their role will be reduced to
         PARTICIPANT. This is because once made a participant of a pull request,
         a user will forever remain a participant. Only their role may be altered.
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request
         targets to call this resource.
         <p>
         <strong>Deprecated since 4.2</strong>. Use
         /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}
         instead.
      operationId: DeleteunassignParticipantRole
      parameters:
      - name: userSlug
        in: path
        description: the slug for the user changing their status
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects:
    get:
      summary: getProjects
      description: |-
        Retrieve a page of projects.
         <p>
         Only projects for which the authenticated user has the <strong>PROJECT_VIEW</strong> permission will be returned.
      operationId: getProjects
      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permission
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createProject
      description: |-
        Create a new project.
         <p>
         To include a custom avatar for the project, the project definition should contain an additional attribute with
         the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be in
         the following format:
         <pre>
             data:(content type, e.g. image/png);base64,(data)
         </pre>
         If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,
         <em>project creation will fail</em>.
         <p>
         The authenticated user must have <strong>PROJECT_CREATE</strong> permission to call this resource.
      operationId: createProject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createProjectRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}:
    get:
      summary: getProject
      description: |-
        Retrieve the project matching the supplied <strong>projectKey</strong>.
         <p>
         The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this
         resource.
      operationId: getProject
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateProject
      description: |-
        Update the project matching the <strong>projectKey</strong> supplied in the resource path.
         <p>
         To include a custom avatar for the updated project, the project definition should contain an additional attribute
         with the key <code>avatar</code> and the value a data URI containing Base64-encoded image data. The URI should be
         in the following format:
         <code>
             data:(content type, e.g. image/png);base64,(data)
         </code>
         If the data is not Base64-encoded, or if a character set is defined in the URI, or the URI is otherwise invalid,
         <em>project creation will fail</em>.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
      operationId: updateProject
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProjectRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteProject
      description: |-
        Delete the project matching the supplied <strong>projectKey</strong>.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
      operationId: deleteProject
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/avatar.png:
    get:
      summary: getProjectAvatar
      description: |-
        Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>.
         <p>
         The authenticated user must have <strong>PROJECT_VIEW</strong> permission for the specified project to call this
         resource.
      operationId: getProjectAvatar
      parameters:
      - name: s
        in: query
        description: |-
          The desired size of the image. The server will return an image as close as possible to the specified
                       size.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 0
          default: 0
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            image/png:
              schema:
                type: string
                x-content-type: image/png
      deprecated: false
    post:
      summary: uploadAvatar
      description: |-
        Update the avatar for the project matching the supplied <strong>projectKey</strong>.
         <p>
         This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.
         <p>
         There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded file size
         (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and
         <strong>JPEG</strong> are preferred due to the file size limit.
         <p>
         This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to
         pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the
         value <code>no-check</code>.
         <p>
         An example <a href="http://curl.haxx.se/">curl</a> request to upload an image name 'avatar.png' would be:
         <pre>
         curl -X POST -u username:password -H "X-Atlassian-Token: no-check" http://example.com/rest/api/1.0/projects/STASH/avatar.png -F avatar=@avatar.png
         </pre>
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
      operationId: uploadAvatar
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/settings/hooks:
    get:
      summary: getRepositoryHooks
      description: |-
        Retrieve a page of repository hooks for this project.
         <p>
         The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this
         resource.
      operationId: GetgetRepositoryHooks
      parameters:
      - name: type
        in: query
        description: the optional type to filter by. Valid values are <code>PRE_RECEIVE</code>
          or <code>POST_RECEIVE</code>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/settings/hooks/{hookKey}/settings:
    get:
      summary: getSettings
      description: |-
        Retrieve the settings for a repository hook for this project.
         <p>
         The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this
         resource.
      operationId: GetgetSettings
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    put:
      summary: setSettings
      description: |-
        Modify the settings for a repository hook for this project.
         <p>
         The service will reject any settings which are too large, the current limit is 32KB once serialized.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
         <p>
         A JSON document can be provided to use as the settings for the hook. These structure and validity of the document
         is decided by the plugin providing the hook.
      operationId: PutsetSettings
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setSettingsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/settings/hooks/{hookKey}/enabled:
    put:
      summary: enableHook
      description: |-
        Enable a repository hook for this project and optionally apply new configuration.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
         <p>
         A JSON document may be provided to use as the settings for the hook. These structure and validity of
         the document is decided by the plugin providing the hook.
      operationId: PutenableHook
      parameters:
      - name: Content-Length
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 0
          default: 0
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    delete:
      summary: disableHook
      description: |-
        Disable a repository hook for this project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
      operationId: DeletedisableHook
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/settings/hooks/{hookKey}:
    get:
      summary: getRepositoryHook
      description: |-
        Retrieve a repository hook for this project.
         <p>
         The authenticated user must have <strong>PROJECT_READ</strong> permission for the specified project to call this
         resource.
      operationId: GetgetRepositoryHook
      parameters:
      - name: hookKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/labels:
    get:
      summary: getAllLabelsForRepository
      description: |-
        Get all labels applied to the given repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository.
      operationId: getAllLabelsForRepository
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: addLabel
      description: |-
        Applies a label to the repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.
      operationId: addLabel
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addLabelRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}:
    delete:
      summary: removeLabel
      description: |-
        Remove label that is applied to the given repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.
      operationId: removeLabel
      parameters:
      - name: labelName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse:
    get:
      summary: getContent
      description: |-
        Retrieve a page of content for a file path at a specified revision.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getContent
      parameters:
      - name: at
        in: query
        description: the commit ID or ref to retrieve the content for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: if true only the type will be returned for the file path instead
          of the contents.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: blame
        in: query
        description: if present the blame will be returned for the file as well.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: noContent
        in: query
        description: if present and used with blame only the blame is retrieved instead
          of the contents.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse/{path:.*}:
    get:
      summary: getContent
      description: |-
        Retrieve a page of content for a file path at a specified revision.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetgetContent
      parameters:
      - name: at
        in: query
        description: the commit ID or ref to retrieve the content for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: if true only the type will be returned for the file path instead
          of the contents.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: blame
        in: query
        description: if present the blame will be returned for the file as well.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: noContent
        in: query
        description: if present and used with blame only the blame is retrieved instead
          of the contents.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: path
        description: the path of the file that is to be modified or created
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: editFile
      description: |-
        Update the content of <code>path</code>, on the given <code>repository</code> and <code>branch</code>.
         <p>
         This resource accepts PUT multipart form data, containing the file in a form-field named <code>content</code>.
         <p>
         An example <a href="http://curl.haxx.se/">curl</a> request to update 'README.md' would be:
         <pre>
         curl -X PUT -u username:password -F content=@README.md  -F 'message=Updated using file-edit REST API'
         -F branch=master -F  sourceCommitId=5636641a50b
          http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md
         </pre>
         <p>
         <ui>
         <li>branch:  the branch on which the <code>path</code> should be modified or created</li>
         <li>content: the full content of the file at <code>path</code> </li>
         <li>message: the message associated with this change, to be used as the commit message.
         Or null if the default message should be used.</li>
         <li>sourceCommitId: the commit ID of the file before it was edited, used to identify if
         content has changed. Or null if this is a new file</li>
         </ui>
         <p>
         The file can be updated or created on a new branch. In this case, the <code>sourceBranch</code> parameter should
         be provided to identify the starting point for the new branch and the <code>branch</code> parameter identifies
         the branch to create the new commit on.
      operationId: editFile
      parameters:
      - name: path
        in: path
        description: the path of the file that is to be modified or created
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks:
    get:
      summary: findWebhooks
      description: |-
        Find webhooks in this repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: findWebhooks
      parameters:
      - name: event
        in: query
        description: list of {@link com.atlassian.webhooks.WebhookEvent} ids to filter
          for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: statistics
        in: query
        description: '{@code true} if statistics should be provided for all found
          webhooks'
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createWebhook
      description: |-
        Create a webhook for the repository specified via the URL.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: createWebhook
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWebhookRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}:
    get:
      summary: getWebhook
      description: |-
        Get a webhook by id.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: getWebhook
      parameters:
      - name: statistics
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: webhookId
        in: path
        description: the existing webhook id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateWebhook
      description: |-
        Update an existing webhook.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: updateWebhook
      parameters:
      - name: webhookId
        in: path
        description: the existing webhook id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWebhookRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteWebhook
      description: |-
        Delete a webhook for the repository specified via the URL.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: deleteWebhook
      parameters:
      - name: webhookId
        in: path
        description: the existing webhook id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest:
    get:
      summary: getLatestInvocation
      description: |-
        Get the latest invocations for a specific webhook.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: getLatestInvocation
      parameters:
      - name: event
        in: query
        description: the string id of a specific event to retrieve the last invocation
          for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: outcome
        in: query
        description: |-
          the outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None specified means that the all
                            will be considered
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: webhookId
        in: path
        description: id of the webhook
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics:
    get:
      summary: getStatistics
      description: |-
        Get the statistics for a specific webhook.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: getStatistics
      parameters:
      - name: event
        in: query
        description: |-
          the string id of a specific event to retrieve the last invocation for. May be empty, in which
                            case all events are considered
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: webhookId
        in: path
        description: id of the webhook
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary:
    get:
      summary: getStatisticsSummary
      description: |-
        Get the statistics summary for a specific webhook.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: getStatisticsSummary
      parameters:
      - name: webhookId
        in: path
        description: id of the webhook
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/webhooks/test:
    post:
      summary: testWebhook
      description: |-
        Test connectivity to a specific endpoint.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: testWebhook
      parameters:
      - name: url
        in: query
        description: the url in which to connect to
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/repos:
    get:
      summary: getRepositories
      description: |-
        Retrieve a page of repositories based on query parameters that control the search. See the documentation of the
         parameters for more details.
         <p>
         This resource is anonymously accessible.
         <p>
         <b>Note on permissions.</b> In absence of the <code>permission</code> query parameter the implicit 'read' permission
         is assumed. Please note that this permission is lower than the REPO_READ permission rather than being equal to
         it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher
         permissions, such as <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked as public.
         The important implication of the above is that an anonymous request to this resource with a permission level
         <tt>REPO_READ</tt> is guaranteed to receive an empty list of repositories as a result. For anonymous requests
         it is therefore recommended to not specify the <tt>permission</tt> parameter at all.
      operationId: getRepositories
      parameters:
      - name: name
        in: query
        description: |-
          (optional) if specified, this will limit the resulting repository list to ones whose name
                              matches this parameter's value. The match will be done case-insensitive and any leading
                              and/or trailing whitespace characters on the <code>name</code> parameter will be stripped.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectname
        in: query
        description: |-
          (optional) if specified, this will limit the resulting repository list to ones whose project's
                              name matches this parameter's value. The match will be done case-insensitive and any leading
                              and/or trailing whitespace characters on the <code>projectname</code> parameter will
                              be stripped.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permission
        in: query
        description: |-
          (optional) if specified, it must be a valid repository permission level name and will limit
                              the resulting repository list to ones that the requesting user has the specified permission
                              level to. If not specified, the default implicit 'read' permission level will be assumed. The
                              currently supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt>
                              and <tt>REPO_ADMIN</tt>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: |-
          (optional) if specified, it must be a valid repository state name and will limit the resulting
                              repository list to ones that are in the specified state. The currently supported explicit state
                              values are <tt>AVAILABLE</tt>, <tt>INITIALISING</tt> and <tt>INITIALISATION_FAILED</tt>.<br>
                              <em>Available since 5.13</em>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: visibility
        in: query
        description: |-
          (optional) if specified, this will limit the resulting repository list based on the
                              repositories visibility. Valid values are <em>public</em> or <em>private</em>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch:
    post:
      summary: watch
      description: |-
        Add the authenticated user as a watcher for the specified commit.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit
         to call this resource.
      operationId: watch
      parameters:
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: unwatch
      description: |-
        Remove the authenticated user as a watcher for the specified commit.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit
         to call this resource.
      operationId: unwatch
      parameters:
      - name: commitId
        in: path
        description: the <i>full {@link Commit#getId() ID}</i> of the commit within
          the repository
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/application-properties:
    get:
      summary: getApplicationProperties
      description: |-
        Retrieve version information and other application properties.
         <p>
         No authentication is required to call this resource.
      operationId: getApplicationProperties
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch:
    post:
      summary: watch
      description: |-
        Add the authenticated user as a watcher for the specified pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: Postwatch
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: unwatch
      description: |-
        Remove the authenticated user as a watcher for the specified pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: Deleteunwatch
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/labels:
    get:
      summary: getLabels
      description: |-
        Returns a paged response of all the labels in the system.
         <p>
         The user needs to be authenticated to use this resource.
      operationId: getLabels
      parameters:
      - name: prefix
        in: query
        description: (optional) prefix to filter the labels on.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/labels/{labelName}:
    get:
      summary: getLabel
      description: |-
        Returns a label.
         <p>
         The user needs to be authenticated to use this resource.
      operationId: getLabel
      parameters:
      - name: labelName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/labels/{labelName}/labeled:
    get:
      summary: getLabelables
      description: |-
        Returns a page of labelables for a given label.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository.
      operationId: getLabelables
      parameters:
      - name: type
        in: query
        description: 'the type of labelables to be returned. Supported values: REPOSITORY'
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: labelName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/changes:
    get:
      summary: getChanges
      description: |-
        Retrieve a page of changes made in a specified commit.
         <p>
         <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not
         possible to request subsequent content when that cap is exceeded.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getChanges
      parameters:
      - name: since
        in: query
        description: |-
          the commit to which <code>until</code> should be compared to produce a page of changes.
                               If not specified the commit's first parent is assumed (if one exists)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: until
        in: query
        description: the commit to retrieve changes for
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/logs/logger/{loggerName}:
    get:
      summary: getLevel
      description: |-
        Retrieve the current log level for a given logger.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getLevel
      parameters:
      - name: loggerName
        in: path
        description: the name of the logger.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/logs/logger/{loggerName}/{levelName}:
    put:
      summary: setLevel
      description: |-
        Set the current log level for a given logger.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: setLevel
      parameters:
      - name: levelName
        in: path
        description: the level to set the logger to. Either TRACE, DEBUG, INFO, WARN
          or ERROR
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: loggerName
        in: path
        description: the name of the logger.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/logs/rootLogger:
    get:
      summary: getRootLevel
      description: |-
        Retrieve the current log level for the root logger.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getRootLevel
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/logs/rootLogger/{levelName}:
    put:
      summary: setRootLevel
      description: |-
        Set the current log level for the root logger.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: setRootLevel
      parameters:
      - name: levelName
        in: path
        description: the level to set the logger to. Either TRACE, DEBUG, INFO, WARN
          or ERROR
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/tasks:
    post:
      summary: createTask
      description: Create a new task.
      operationId: createTask
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTaskRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/tasks/{taskId}:
    get:
      summary: getTask
      description: Retrieve a existing task.
      operationId: getTask
      parameters:
      - name: taskId
        in: path
        description: the id identifying the task to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateTask
      description: |-
        Update a existing task.
         <p>
         As of Stash 3.3, only the state and text of a task can be updated.
         <p>
         Updating the state of a task is allowed for any user having <em>READ</em> access to the repository.
         However only the task's creator, the context's author or an admin of the context's repository can update the
         task's text. (For a pull request task, those are the task's creator, the pull request's author or an admin on the
         repository containing the pull request). Additionally the task's text cannot be updated if it has been resolved.
      operationId: updateTask
      parameters:
      - name: taskId
        in: path
        description: the id identifying the task to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTaskRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteTask
      description: |-
        Delete a task.
         <p>
         Note that only the task's creator, the context's author or an admin of the context's repository can delete a
         task. (For a pull request task, those are the task's creator, the pull request's author or an admin on the
         repository containing the pull request). Additionally a task cannot be deleted if it has already been resolved.
      operationId: deleteTask
      parameters:
      - name: taskId
        in: path
        description: the id identifying the task to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/hooks/{hookKey}/avatar:
    get:
      summary: getAvatar
      description: Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.
      operationId: getAvatar
      parameters:
      - name: version
        in: query
        description: |-
          optional version used for HTTP caching only - any non-blank version will result in a large max-age Cache-Control header.
                          Note that this does not affect the Last-Modified header.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: hookKey
        in: path
        description: the complete module key of the hook module
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            image/png:
              schema:
                type: string
                x-content-type: image/png
      deprecated: false
  /api/1.0/admin/groups:
    get:
      summary: getGroups
      description: |-
        Retrieve a page of groups.
         <p>
         The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.
      operationId: getGroups
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createGroup
      description: |-
        Create a new group.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: createGroup
      parameters:
      - name: name
        in: query
        description: Name of the group.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteGroup
      description: |-
        Deletes the specified group, removing them from the system. This also removes any permissions that may have been
         granted to the group.
         <p>
         A user may not delete the last group that is granting them administrative permissions, or a group with greater
         permissions than themselves.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: deleteGroup
      parameters:
      - name: name
        in: query
        description: the name identifying the group to delete
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users:
    get:
      summary: getUsers
      description: |-
        Retrieve a page of users.
         <p>
         The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
      operationId: getUsers
      parameters:
      - name: filter
        in: query
        description: |-
          if specified only users with usernames, display name or email addresses containing the supplied
                         string will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateUserDetails
      description: |-
        Update a user's details.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: updateUserDetails
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserDetailsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createUser
      description: |-
        Creates a new user from the assembled query parameters.
         <p>
         The default group can be used to control initial permissions for new users, such as granting users the ability
         to login or providing read access to certain projects or repositories. If the user is not added to the default
         group, they may not be able to login after their account is created until explicit permissions are configured.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: createUser
      parameters:
      - name: name
        in: query
        description: the username for the new user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: the password for the new user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: displayName
        in: query
        description: the display name for the new user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: emailAddress
        in: query
        description: the e-mail address for the new user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: addToDefaultGroup
        in: query
        description: |-
          <code>true</code> to add the user to the default group, which can be used to grant them
                                    a set of initial permissions; otherwise, <code>false</code> to not add them to a group
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: notify
        in: query
        description: |-
          if present and not <code>false</code> instead of requiring a password,
                                    the create user will be notified via email their account has been created and requires
                                    a password to be reset. This option can only be used if a mail server has been configured
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteUser
      description: |-
        Deletes the specified user, removing them from the system. This also removes any permissions that may have been
         granted to the user.
         <p>
         A user may not delete themselves, and a user with <strong>ADMIN</strong> permissions may not delete a user with
         <strong>SYS_ADMIN</strong>permissions.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: deleteUser
      parameters:
      - name: name
        in: query
        description: the username identifying the user to delete
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/credentials:
    put:
      summary: updateUserPassword
      description: |-
        Update a user's password.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not update
         the password of a user with greater permissions than themselves.
      operationId: updateUserPassword
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserPasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/erasure:
    get:
      summary: validateErasable
      description: |-
        Validate if a user can be erased.
         <p>
         A username is only valid for erasure if it exists as the username of a deleted user. This endpoint will return
         an appropriate error response if the supplied username is invalid for erasure.
         <p>
         This endpoint does <strong>not</strong> perform the actual user erasure, and will not modify the application in
         any way.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: validateErasable
      parameters:
      - name: name
        in: query
        description: the username of the user to validate erasability for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: eraseUser
      description: |-
        Erases personally identifying user data for a deleted user.
         <p>
         References in the application to the original username will be either removed or updated to a new non-identifying
         username. Refer to the
         <a href="https://confluence.atlassian.com/gdpr/bitbucket-right-to-erasure-949770560.html">support guide</a> for
         details about what data is and isn't erased.
         <p>
         User erasure can only be performed on a deleted user. If the user has not been deleted first then this endpoint
         will return a bad request and no erasure will be performed.
         <p>
         Erasing user data is <strong>irreversible</strong> and may lead to a degraded user experience. This method should
         not be used as part of a standard user deletion and cleanup process.
         <p>
         Plugins can participate in user erasure by defining a {@code <user-erasure-handler>} module. If one or more plugin
         modules fail, an error summary of the failing modules is returned.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: eraseUser
      parameters:
      - name: name
        in: query
        description: the username identifying the user to erase
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/rename:
    post:
      summary: renameUser
      description: |-
        Rename a user.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: renameUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/renameUserRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/captcha:
    delete:
      summary: clearUserCaptchaChallenge
      description: |-
        Clears any CAPTCHA challenge that may constrain the user with the supplied username when they authenticate.
         Additionally any counter or metric that contributed towards the user being issued the CAPTCHA challenge
         (for instance too many consecutive failed logins) will also be reset.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not clear
         the CAPTCHA of a user with greater permissions than themselves.
      operationId: clearUserCaptchaChallenge
      parameters:
      - name: name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/groups/add-user:
    post:
      summary: addUserToGroup
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.
         <p>
         Add a user to a group.
         <p>
         In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addUserToGroup
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserToGroupRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/users/add-group:
    post:
      summary: addGroupToUser
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.
         <p>
         Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and
         <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear
         redundant, but it facilitates a specific UI component in Stash.
         <p>
         In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addGroupToUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addGroupToUserRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/groups/add-users:
    post:
      summary: addUsersToGroup
      description: |-
        Add multiple users to a group.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addUsersToGroup
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUsersToGroupRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/users/add-groups:
    post:
      summary: addUserToGroups
      description: |-
        Add a user to one or more groups.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addUserToGroups
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addUserToGroupsRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/groups/remove-user:
    post:
      summary: removeUserFromGroup
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.
         <p>
         Remove a user from a group.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
         <p>
         In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
      operationId: removeUserFromGroup
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeUserFromGroupRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/users/remove-group:
    post:
      summary: removeGroupFromUser
      description: |-
        Remove a user from a group. This is very similar to <code>groups/remove-user</code>, but with the <em>context</em>
         and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear
         redundant, but it facilitates a specific UI component in Stash.
         <p>
         In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.
         <p>
         The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: removeGroupFromUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeGroupFromUserRequest'
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/admin/groups/more-members:
    get:
      summary: findUsersInGroup
      description: |-
        Retrieves a list of users that are members of a specified group.
         <p>
         The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
      operationId: findUsersInGroup
      parameters:
      - name: context
        in: query
        description: the group which should be used to locate members
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          if specified only users with usernames, display names or email addresses containing the
                            supplied string will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/groups/more-non-members:
    get:
      summary: findUsersNotInGroup
      description: |-
        Retrieves a list of users that are <em>not</em> members of a specified group.
         <p>
         The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
      operationId: findUsersNotInGroup
      parameters:
      - name: context
        in: query
        description: the group which should be used to locate non-members
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          if specified only users with usernames, display names or email addresses containing the
                            supplied string will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/more-members:
    get:
      summary: findGroupsForUser
      description: |-
        Retrieves a list of groups the specified user is a member of.
         <p>
         The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
      operationId: findGroupsForUser
      parameters:
      - name: context
        in: query
        description: the user which should be used to locate groups
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filter
        in: query
        description: if specified only groups with names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/users/more-non-members:
    get:
      summary: findOtherGroupsForUser
      description: |-
        Retrieves a list of groups the specified user is <em>not</em> a member of.
         <p>
         The authenticated user must have the <strong>LICENSED_USER</strong> permission to call this resource.
      operationId: findOtherGroupsForUser
      parameters:
      - name: context
        in: query
        description: the user which should be used to locate groups
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: filter
        in: query
        description: if specified only groups with names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/groups:
    get:
      summary: getGroups1
      description: |-
        Retrieve a page of group names.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource.
      operationId: getGroups1
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos:
    get:
      summary: getRepositories
      description: |-
        Retrieve repositories from the project corresponding to the supplied <strong>projectKey</strong>.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified project to call this
         resource.
      operationId: GetgetRepositories
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createRepository
      description: |-
        Create a new repository. Requires an existing project in which this repository will be created.
         The only parameters which will be used are name and scmId.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context project to call this
         resource.
      operationId: createRepository
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRepositoryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}:
    get:
      summary: getRepository
      description: |-
        Retrieve the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong>.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getRepository
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        description: the repository slug
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateRepository
      description: |-
        Update the repository matching the <strong>repositorySlug</strong> supplied in the resource path.
         <p>
         The repository's slug is derived from its name. If the name changes the slug may also change.
         <p>
         This API can be used to move the repository to a different project by setting the new project in the request,
         example: {@code {"project":{"key":"NEW_KEY"}}} .
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: updateRepository
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        description: the repository slug
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRepositoryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: forkRepository
      description: |-
        Create a new repository forked from an existing repository.
         <p>
         The JSON body for this {@code POST} is not required to contain <i>any</i> properties. Even the name may be
         omitted. The following properties will be used, if provided:
         <ul>
             <li>{@code "name":"Fork name"} - Specifies the forked repository's name
             <ul>
                 <li>Defaults to the name of the origin repository if not specified</li>
             </ul>
             </li>
             <li>{@code "project":{"key":"TARGET_KEY"}} - Specifies the forked repository's target project by key
             <ul>
                 <li>Defaults to the current user's personal project if not specified</li>
             </ul>
             </li>
         </ul>
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository and
         <strong>PROJECT_ADMIN</strong> on the target project to call this resource. Note that users <i>always</i>
         have <b>PROJECT_ADMIN</b> permission on their personal projects.
      operationId: forkRepository
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        description: the repository slug
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/forkRepositoryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteRepository
      description: |-
        Schedule the repository matching the supplied <strong>projectKey</strong> and <strong>repositorySlug</strong> to
         be deleted. If the request repository is not present
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this
         resource.
      operationId: deleteRepository
      parameters:
      - name: projectKey
        in: path
        description: the parent project key
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        description: the repository slug
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/contributing:
    get:
      summary: findContributing
      operationId: findContributing
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json; charset=UTF-8:
              schema:
                type: object
                x-content-type: application/json; charset=UTF-8
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/license:
    get:
      summary: findLicense
      operationId: findLicense
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json; charset=UTF-8:
              schema:
                type: object
                x-content-type: application/json; charset=UTF-8
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/readme:
    get:
      summary: findReadme
      operationId: findReadme
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json; charset=UTF-8:
              schema:
                type: object
                x-content-type: application/json; charset=UTF-8
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/forks:
    get:
      summary: getForkedRepositories
      description: |-
        Retrieve repositories which have been forked from this one. Unlike {@link #getRelatedRepositories(Repository,
         PageRequest) related repositories}, this only looks at a given repository's direct forks. If those forks have
         themselves been the origin of more forks, such "grandchildren" repositories will not be retrieved.
         <p>
         Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even
         if other repositories have been forked from this one.
      operationId: getForkedRepositories
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/related:
    get:
      summary: getRelatedRepositories
      description: |-
        Retrieve repositories which are related to this one. Related repositories are from the same
         {@link Repository#getHierarchyId() hierarchy} as this repository.
         <p>
         Only repositories to which the authenticated user has <b>REPO_READ</b> permission will be included, even
         if more repositories are part of this repository's hierarchy.
      operationId: getRelatedRepositories
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/recreate:
    post:
      summary: retryCreateRepository
      description: |-
        If a create or fork operation fails, calling this method will clean up the broken repository and try again. The
         repository must be in an INITIALISATION_FAILED state.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project to call this
         resource.
      operationId: retryCreateRepository
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests:
    get:
      summary: getPage
      description: |-
        Retrieve a page of pull requests to or from the specified repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call
         this resource.

         Optionally clients can specify PR participant filters. Each filter has a mandatory {@code username.N}
         parameter, and the optional {@code role.N} and {@code approved.N} parameters.
         <ul>
             <li>
                 {@code username.N} - the "root" of a single participant filter, where "N" is a natural number
                 starting from 1. This allows clients to specify multiple participant filters, by providing consecutive
                 filters as {@code username.1}, {@code username.2} etc. Note that the filters numbering has to start
                 with 1 and be continuous for all filters to be processed. The total allowed number of participant
                 filters is 10 and all filters exceeding that limit will be dropped.
             </li>
             <li>
                 {@code role.N}(optional) the role associated with {@code username.N}.
                 This must be one of {@code AUTHOR}, {@code REVIEWER}, or{@code PARTICIPANT}
             </li>
             <li>
                 {@code approved.N}(optional) the approved status associated with {@code username.N}.
                 That is whether {@code username.N} has approved the PR. Either {@code true}, or {@code false}
             </li>
         </ul>
      operationId: getPage
      parameters:
      - name: direction
        in: query
        description: |-
          (optional, defaults to <strong>INCOMING</strong>) the direction relative to the specified
                            repository. Either <strong>INCOMING</strong> or <strong>OUTGOING</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: incoming
          default: incoming
      - name: at
        in: query
        description: |-
          (optional) a <i>fully-qualified</i> branch ID to find pull requests to or from,
                     such as {@code refs/heads/master}
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: |-
          (optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong> to return pull request
                         in any state. If a state is supplied only pull requests in the specified state will be returned.
                         Either <strong>OPEN</strong>, <strong>DECLINED</strong> or <strong>MERGED</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          (optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either
                        <strong>OLDEST</strong> (as in: "oldest first") or <strong>NEWEST</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withAttributes
        in: query
        description: (optional) defaults to true, whether to return additional pull
          request attributes
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: withProperties
        in: query
        description: (optional) defaults to true, whether to return additional pull
          request properties
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: create
      description: |-
        Create a new pull request between two branches. The branches may be in the same repository, or different ones.
         When using different repositories, they must still be in the same {@link Repository#getHierarchyId() hierarchy}.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the "from" and "to"repositories to
         call this resource.
      operationId: create
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}:
    get:
      summary: get
      description: |-
        Retrieve a pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: Getget
      parameters:
      - name: pullRequestId
        in: path
        description: the ID of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: update
      description: |-
        Update the title, description, reviewers or destination branch of an existing pull request.
         <p>
         <strong>Note:</strong> the <em>reviewers</em> list may be updated using this resource. However the
         <em>author</em> and <em>participants</em> list may not.
         <p>
         The authenticated user must either:
         <ul>
             <li>be the author of the pull request and have the <strong>REPO_READ</strong> permission for the repository
             that this pull request targets; or</li>
             <li>have the <strong>REPO_WRITE</strong> permission for the repository that this pull request targets</li>
         </ul>
         to call this resource.
      operationId: Putupdate
      parameters:
      - name: pullRequestId
        in: path
        description: the ID of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: delete
      description: |-
        Deletes a pull request.
         <p>
         To call this resource, users must be authenticated and have permission to view the pull request.
         Additionally, they must:
         <ul>
             <li>
                 be the pull request author, if the system is configured to allow authors to delete their own
                 pull requests (this is the default) OR
             </li>
             <li>have repository administrator permission for the repository the pull request is targeting</li>
         </ul>

         A body containing the version of the pull request must be provided with this request.

         <pre><code>{ "version": 1 }</code></pre>
      operationId: delete
      parameters:
      - name: pullRequestId
        in: path
        description: the ID of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge:
    get:
      summary: canMerge
      description: |-
        Test whether a pull request can be merged.
         <p>
         A pull request may not be merged if:
         <ul>
             <li>there are conflicts that need to be manually resolved before merging; and/or</li>
             <li>one or more merge checks have vetoed the merge.</li>
         </ul>
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: canMerge
      parameters:
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: merge
      description: |-
        Merge the specified pull request.
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: merge
      parameters:
      - name: version
        in: query
        description: |-
          the current version of the pull request. If the server's version isn't the same as the specified
                          version the operation will fail. To determine the current version of the pull request it should be
                          fetched from the server prior to this operation. Look for the 'version' attribute in the returned
                          JSON structure.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen:
    post:
      summary: reopen
      description: |-
        Re-open a declined pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: reopen
      parameters:
      - name: version
        in: query
        description: |-
          the current version of the pull request. If the server's version isn't the same as the specified
                          version the operation will fail. To determine the current version of the pull request it should be
                          fetched from the server prior to this operation. Look for the 'version' attribute in the returned
                          JSON structure.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline:
    post:
      summary: decline
      description: |-
        Decline a pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: decline
      parameters:
      - name: version
        in: query
        description: |-
          the current version of the pull request. If the server's version isn't the same as the specified
                          version the operation will fail. To determine the current version of the pull request it should be
                          fetched from the server prior to this operation. Look for the 'version' attribute in the returned
                          JSON structure.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities:
    get:
      summary: getActivities
      description: |-
        Retrieve a page of activity associated with a pull request.
         <p>
         Activity items include comments, approvals, rescopes (i.e. adding and removing of commits), merges and more.
         <p>
         Different types of activity items may be introduced in newer versions of Stash or by user installed plugins, so
         clients should be flexible enough to handle unexpected entity shapes in the returned page.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: getActivities
      parameters:
      - name: fromId
        in: query
        description: (optional) the id of the activity item to use as the first item
          in the returned page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: fromType
        in: query
        description: |-
          (required if <strong>fromId</strong> is present) the type of the activity item specified by
                           <strong>fromId</strong> (either <strong>COMMENT</strong> or <strong>ACTIVITY</strong>)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pullRequestId
        in: path
        description: the id of the pull request within the repository
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/tags:
    get:
      summary: getTags
      description: |-
        Retrieve the tags matching the supplied <strong>filterText</strong> param.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this
         resource.
      operationId: getTags
      parameters:
      - name: filterText
        in: query
        description: the text to match on
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orderBy
        in: query
        description: ordering of refs either ALPHABETICAL (by name) or MODIFICATION
          (last updated)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createTag
      description: |-
        Creates a tag using the information provided in the {@link RestCreateTagRequest request}
         <p>
         The authenticated user must have <strong>REPO_WRITE</strong> permission for the context repository to call this
         resource.
      operationId: createTag
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTagRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/tags/{name:.*}:
    get:
      summary: getTag
      description: |-
        Retrieve a tag in the specified repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this
         resource.
      operationId: getTag
      parameters:
      - name: name
        in: path
        description: the name of the tag to be retrieved
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests:
    get:
      summary: getPullRequestSettings
      description: |-
        Retrieve the pull request settings for the context repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the context repository to call this
         resource.
         <p>
         This resource will call all RestFragments that are registered with the key
         <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a
         non-empty Map of errors, then no fragments will execute.
         <p>
         The property keys for the settings that are bundled with the application are
         <ul>
             <li>mergeConfig - the merge strategy configuration for pull requests</li>
             <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>
             <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - the merge check configuration for required approvers</li>
             <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>
             <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>
             <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 if the merge check is disabled</li>
             <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - the merge check configuration for required builds</li>
         </ul>
      operationId: getPullRequestSettings
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
      deprecated: false
    post:
      summary: updatePullRequestSettings
      description: |-
        Update the pull request settings for the context repository.
         <p>
         The authenticated user must have <strong>REPO_ADMIN</strong> permission for the context repository to call this
         resource.
         <p>
         This resource will call all RestFragments that are registered with the key
         <strong>bitbucket.repository.settings.pullRequests</strong>. If any fragment fails validations by returning a
         non-empty Map of errors, then no fragments will execute.
         <p>
         Only the settings that should be updated need to be included in the request.
         <p>
         The property keys for the settings that are bundled with the application are
         <ul>
             <li>mergeConfig - the merge strategy configuration for pull requests</li>
             <li>requiredApprovers - (Deprecated, please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook instead) the number of approvals required on a pull request for it to be mergeable, or 0 to disable the merge check</li>
             <li>com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required approvals)</li>
             <li>requiredAllApprovers - whether or not all approvers must approve a pull request for it to be mergeable</li>
             <li>requiredAllTasksComplete - whether or not all tasks on a pull request need to be completed for it to be mergeable</li>
             <li>requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck instead) the number of successful builds on a pull request for it to be mergeable, or 0 to disable the merge check</li>
             <li>com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck - a json map containing the keys 'enabled' (a boolean to enable or disable this merge check) and 'count' (an integer to set the number of required builds)</li>
         </ul>
         <strong>Merge strategy configuration deletion:</strong>
         <p>
         An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with an empty
         "mergeConfig" attribute. i.e:
         <pre>
         {
             "mergeConfig": {
             }
         }
         </pre>
         Upon completion of this request, the effective configuration will be:
         <ul>
             <li>The configuration set for this repository's SCM type as set at the project level, if present, otherwise</li>
             <li>the configuration set for this repository's SCM type as set at the instance level, if present, otherwise</li>
             <li>the default configuration for this repository's SCM type</li>
         <ul>
      operationId: updatePullRequestSettings
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePullRequestSettingsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/inbox/pull-requests/count:
    get:
      summary: getPullRequestCount
      operationId: getPullRequestCount
      parameters: []
      responses:
        "200":
          content:
            application/json; charset=UTF-8:
              schema:
                type: object
                x-content-type: application/json; charset=UTF-8
      deprecated: false
  /api/1.0/inbox/pull-requests:
    get:
      summary: getPullRequests
      operationId: GetgetPullRequests
      parameters:
      - name: start
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 0
          default: 0
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 25
          default: 25
      - name: role
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: reviewer
          default: reviewer
      responses:
        "200":
          content:
            application/json; charset=UTF-8:
              schema:
                type: object
                x-content-type: application/json; charset=UTF-8
      deprecated: false
  /api/1.0/dashboard/pull-request-suggestions:
    get:
      summary: getPullRequestSuggestions
      description: |-
        Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to
         raise. Such suggestions are based on ref changes occurring and so contain the ref change that
         prompted the suggestion plus the time the change event occurred. Changes will be returned in
         descending order based on the time the change that prompted the suggestion occurred.
         <p>
         Note that although the response is a page object, the interface does not support paging, however
         a limit can be applied to the size of the returned page.
      operationId: getPullRequestSuggestions
      parameters:
      - name: changesSince
        in: query
        description: |-
          restrict pull request suggestions to be based on events that occurred since some time
                               in the past. This is expressed in seconds since "now". So to return suggestions
                               based only on activity within the past 48 hours, pass a value of 172800.
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "172800"
          default: "172800"
      - name: limit
        in: query
        description: restricts the result set to return at most this many suggestions.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 3
          default: 3
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/dashboard/pull-requests:
    get:
      summary: getPullRequests
      description: |-
        Retrieve a page of pull requests where the current authenticated user is involved as either a reviewer, author
         or a participant. The request may be filtered by pull request state, role or participant status.
      operationId: GetgetPullRequests1
      parameters:
      - name: state
        in: query
        description: |-
          (optional, defaults to returning pull requests in any state). If a state is supplied only pull
                        requests in the specified state will be returned. Either <strong>OPEN</strong>,
                        <strong>DECLINED</strong> or <strong>MERGED</strong>.
                        Omit this parameter to return pull request in any state.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: role
        in: query
        description: |-
          (optional, defaults to returning pull requests for any role). If a role is supplied only pull
                        requests where the authenticated user is a participant in the given role will be returned.
                        Either <strong>REVIEWER</strong>, <strong>AUTHOR</strong> or <strong>PARTICIPANT</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: participantStatus
        in: query
        description: |-
          (optional, defaults to returning pull requests with any participant status). A comma
                                    separated list of participant status. That is, one or more of
                                    <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or <strong>APPROVED</strong>.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: |-
          (optional, defaults to <strong>NEWEST</strong>) the order to return pull requests in, either
                        <strong>OLDEST</strong> (as in: "oldest first"), <strong>NEWEST</strong>,
                        <strong>PARTICIPANT_STATUS</strong>, or <strong>CLOSED_DATE</strong>. Where
                        <strong>CLOSED_DATE</strong> is specified and the result set includes pull requests that are not in
                        the closed state, these pull requests will appear first in the result set, followed by most recently
                        closed pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: closedSince
        in: query
        description: |-
          (optional, defaults to returning pull requests regardless of closed since date). Permits
                                returning only pull requests with a closed timestamp set more recently that
                                (now - closedSince). Units are in seconds. So for example if closed since 86400 is set only
                                pull requests closed in the previous 24 hours will be returned.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits:
    get:
      summary: getCommits
      description: |-
        Retrieve commits for the specified pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: getCommits
      parameters:
      - name: withCounts
        in: query
        description: |-
          if set to true, the service will add "authorCount" and "totalCount" at the end of the page.
                               "authorCount" is the number of different authors and "totalCount" is the total number of commits.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/permissions/groups:
    get:
      summary: getGroupsWithAnyPermission
      description: |-
        Retrieve a page of groups that have been granted at least one permission for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: GetgetGroupsWithAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForGroups
      description: |-
        Promote or demote a group's permission level for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource. In addition, a user may not demote a group's permission level if their
         own permission level would be reduced as a result.
      operationId: setPermissionForGroups
      parameters:
      - name: permission
        in: query
        description: |-
          The permission to grant.
                                 See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)
                                 for a detailed explanation of what each permission entails.
                                 Available project permissions are:
                                 <ul>
                                     <li>PROJECT_READ</li>
                                     <li>PROJECT_WRITE</li>
                                     <li>PROJECT_ADMIN</li>
                                 </ul>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: the names of the groups
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: revokePermissionsForGroup
      description: |-
        Revoke all permissions for the specified project for a group.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
         <p>
         In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
      operationId: DeleterevokePermissionsForGroup
      parameters:
      - name: name
        in: query
        description: the name of the group
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: object
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/permissions/groups/none:
    get:
      summary: getGroupsWithoutAnyPermission
      description: |-
        Retrieve a page of groups that have no granted permissions for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: GetgetGroupsWithoutAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/permissions/users:
    get:
      summary: getUsersWithAnyPermission
      description: |-
        Retrieve a page of users that have been granted at least one permission for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: GetgetUsersWithAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForUsers
      description: |-
        Promote or demote a user's permission level for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource. In addition, a user may not reduce their own permission level unless
         they have a global permission that already implies that permission.
      operationId: setPermissionForUsers
      parameters:
      - name: name
        in: query
        description: the names of the users
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permission
        in: query
        description: |-
          the permission to grant. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)
                                 for a detailed explanation of what each permission entails.
                                 Available project permissions are:
                                 <ul>
                                     <li>PROJECT_READ</li>
                                     <li>PROJECT_WRITE</li>
                                     <li>PROJECT_ADMIN</li>
                                 </ul>
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: object
                x-content-type: text/plain
      deprecated: false
    delete:
      summary: revokePermissionsForUser
      description: |-
        Revoke all permissions for the specified project for a user.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
         <p>
         In addition, a user may not revoke their own project permissions if they do not have a higher global permission.
      operationId: DeleterevokePermissionsForUser
      parameters:
      - name: name
        in: query
        description: the name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: object
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/permissions/users/none:
    get:
      summary: getUsersWithoutPermission
      description: |-
        Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: GetgetUsersWithoutPermission
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/permissions/{permission}/all:
    get:
      summary: hasAllUserPermission
      description: |-
        Check whether the specified permission is the default permission (granted to all users) for a project.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: hasAllUserPermission
      parameters:
      - name: permission
        in: path
        description: |-
          the permission to grant
                                 Available project permissions are:
                                 <ul>
                                     <li>PROJECT_READ</li>
                                     <li>PROJECT_WRITE</li>
                                     <li>PROJECT_ADMIN</li>
                                 </ul>
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: modifyAllUserPermission
      description: |-
        Grant or revoke a project permission to all users, i.e. set the default permission.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
         global permission to call this resource.
      operationId: modifyAllUserPermission
      parameters:
      - name: allow
        in: query
        description: <em>true</em> to grant the specified permission to all users,
          or <em>false</em> to revoke it
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: permission
        in: path
        description: |-
          the permission to grant
                                 Available project permissions are:
                                 <ul>
                                     <li>PROJECT_READ</li>
                                     <li>PROJECT_WRITE</li>
                                     <li>PROJECT_ADMIN</li>
                                 </ul>
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: object
                x-content-type: text/plain
      deprecated: false
  /api/1.0/projects/{projectKey}/settings/pull-requests/{scmId}:
    get:
      summary: getPullRequestSettings
      description: |-
        Retrieve the merge strategy configuration for this project and SCM.
         <p>
         The authenticated user must have <strong>PROJECT_READ</strong> permission for the context repository to call this
         resource.
      operationId: GetgetPullRequestSettings
      parameters:
      - name: scmId
        in: path
        description: the SCM to get strategies for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: updatePullRequestSettings
      description: |-
        Update the pull request merge strategy configuration for this project and SCM.
         <p>
         The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the context repository to call this
         resource.
         <p>
         Only the strategies provided will be enabled, the default must be set and included in the set of strategies.
         <p>
         An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with
         an empty "mergeConfig" attribute. i.e:
         <pre>
         {
             "mergeConfig": {
             }
         }
         </pre>
         Upon completion of this request, the effective configuration will be the configuration explicitly set for
         the SCM, or if no such explicit configuration is set then the default configuration will be used.
      operationId: PostupdatePullRequestSettings
      parameters:
      - name: scmId
        in: path
        description: the SCM to get strategies for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePullRequestSettingsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/exports/{jobId}/cancel:
    post:
      summary: cancelExportJob
      description: |-
        Requests the cancellation of an export job.

         <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has
         already finished (successfully or with errors) or if it has already been canceled before, then an error will be
         returned.

         <p>There might be a small delay between accepting the request and actually cancelling the job. In most cases,
         the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster,
         it can however take a few seconds to cancel a job.

         <p>A client should always actively query the job status to confirm that a job has been successfully canceled.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: cancelExportJob
      parameters:
      - name: jobId
        in: path
        description: the ID of the job to cancel
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/imports/{jobId}/cancel:
    post:
      summary: cancelImportJob
      description: |-
        Requests the cancellation of an import job.

         <p>The request to cancel a job will be processed successfully if the job is actually still running. If it has
         already finished (successfully or with errors) or if it has already been canceled before, then an error will be
         returned.

         <p>Note that import jobs are not canceled as instantaneously as export jobs. Rather, once the request has been
         accepted, there are a number of checkpoints at which the job will actually apply it and stop. This is to keep
         the system in a reasonably consistent state:

         <ul>
             <li>After the current fork hierarchy has been imported and verified.</li>
             <li>Before the next repository is imported.</li>
             <li>Before the next pull request is imported.</li>
         </ul>

         <p>A client should always actively query the job status to confirm that a job has been successfully canceled.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: cancelImportJob
      parameters:
      - name: jobId
        in: path
        description: the ID of the job to cancel
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/exports/{jobId}:
    get:
      summary: getExportJob
      description: |-
        Gets the details, including the current status and progress, of the export job identified by the given ID.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getExportJob
      parameters:
      - name: jobId
        in: path
        description: the ID of the job
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/exports/{jobId}/messages:
    get:
      summary: getExportJobMessages
      description: |-
        Gets the messages generated by the job.

         <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the
         following severities. The severity parameter can be repeated to include multiple severities
         in one response.

         <ul>
             <li>INFO</li>
             <li>WARN</li>
             <li>ERROR</li>
         </ul>

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getExportJobMessages
      parameters:
      - name: severity
        in: query
        description: the severity to include in the results
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subject
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobId
        in: path
        description: the ID of the job
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/imports/{jobId}:
    get:
      summary: getImportJob
      description: |-
        Gets the details, including the current status and progress, of the import job identified by the given ID.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getImportJob
      parameters:
      - name: jobId
        in: path
        description: the ID of the job
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/imports/{jobId}/messages:
    get:
      summary: getImportJobMessages
      description: |-
        Gets the messages generated by the job.

         <p>Without any filter, all messages will be returned, but the response can optionally be filtered for the
         following severities. The severity parameter can be repeated to include multiple severities
         in one response.

         <ul>
             <li>INFO</li>
             <li>WARN</li>
             <li>ERROR</li>
         </ul>

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getImportJobMessages
      parameters:
      - name: severity
        in: query
        description: the severity to include in the results
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subject
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: jobId
        in: path
        description: the ID of the job
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/exports/preview:
    post:
      summary: previewExport
      description: |-
        Enumerates the projects and repositories that would be exported for a given export request.

         <p>All affected repositories will be enumerated explicitly, and while projects are listed as individual items in
         responses from this endpoint, their presence does not imply that all their repositories are included.

         <p>While this endpoint can be used to verify that all selectors in the request apply as intended, it should be
         noted that a subsequent, actual export might contain a different set of repositories, as they might have been
         added or deleted in the meantime.

         <p>Note that the overall response from this endpoint can become very large when a lot of repositories end up in
         the selection. This is why the server is streaming the response while it is being generated (as opposed to
         creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.

         <p>Also, due to the potential size of the response, projects and repositories are listed with fewer details than
         in other REST responses.

         <p>For a more detailed description of selectors, see the endpoint documentation for starting an export.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: previewExport
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/previewExportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/exports:
    post:
      summary: startExport
      description: |-
        <p>Starts a background job that exports the selected repositories.

         <p>Only 2 concurrent exports are supported <em>per cluster node</em>. If a request ends up on a node that is already
         running that many export jobs, the request will be rejected and an error returned.

         <p>The response includes a description of the job that has been started, and its ID can be used to query
         these details again, including the current progress, warnings and errors that occurred while processing the job,
         and to interrupt and cancel the execution of this job.

         <p>The request to start an export is similar to the one for previewing an export. Additionally, it accepts an optional
         parameter, <tt>exportLocation</tt>, which can be used to specify a <em>relative</em> path within
         <tt>data/migration/export</tt> in the shared home directory. No locations outside of that directory will be
         accepted for exports.

         <p>There are essentially three ways to select repositories for export. Regardless of which you use, a few
         general rules apply:
         <ul>
             <li>You can supply a list of selectors. The selection will be additive.</li>
             <li>Repositories that are selected more than once due to overlapping selectors will be de-duplicated and
             effectively exported only once.</li>
             <li>For every selected repository, its full fork hierarchy will be considered selected, even if parts of that
             hierarchy would otherwise not be matched by the provided selectors. For example, when you explicitly
             select a single repository only, but that repository is a fork, then its origin will be exported (and
             eventually imported), too.</li>
         </ul>

         <p>Now, a single repository can be selected like this:

         <pre>
             {
                "projectKey": "PRJ",
                "slug": "my-repo"
             }
             </pre>

         <p>Second, all repositories in a specific project can be selected like this:

         <pre>
             {
                "projectKey": "PRJ",
                "slug": *"
             }
             </pre>

         <p>And third, all projects and repositories in the system would be selected like this:

         <pre>
             {
                "projectKey": "*",
                "slug": *"
             }
             </pre>

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: startExport
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/startExportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/migration/imports:
    post:
      summary: startImport
      description: |-
        Starts a background job that imports the specified archive.

         <p>Only 1 import at a time is supported <em>per cluster</em>. If another request is made while an import is already
         running, the request will be rejected and an error returned.

         <p>The path in the request must point to a valid archive file. It can be either absolute, or will be interpreted
         as relative to the <tt>data/migration/import</tt> directory in the shared home directory.

         <p>The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: startImport
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/startImportRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks:
    get:
      summary: getPullRequestTasks
      description: Retrieve the tasks associated with a pull request.
      operationId: getPullRequestTasks
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/tasks/count:
    get:
      summary: countPullRequestTasks
      description: |-
        Retrieve the total number of {@link TaskState#OPEN open} and
         {@link TaskState#RESOLVED resolved} tasks associated with a pull request.
      operationId: countPullRequestTasks
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments:
    get:
      summary: getComments
      description: |-
        Gets comments for the specified PullRequest.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: GetgetComments
      parameters:
      - name: anchorState
        in: query
        description: |-
          {@code ACTIVE} to stream the active comments;
                              {@code ORPHANED} to stream the orphaned comments;
                              {@code ALL} to stream both the active and the orphaned comments;
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: ACTIVE
          default: ACTIVE
      - name: diffType
        in: query
        description: |-
          {@code EFFECTIVE} to stream the comments related to the effective diff of the pull request;
                              {@code RANGE} to stream comments related to a commit range between two arbitrary commits
                                            (requires {@code fromHash} and {@code toHash});
                              {@code COMMIT} to stream comments related to a commit between two arbitrary commits (requires
                                  {@code fromHash} and {@code toHash})
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fromHash
        in: query
        description: the from commit hash to stream comments for a {@code RANGE} or
          {@code COMMIT} arbitrary change scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: the path to stream comments for a given path
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: toHash
        in: query
        description: the to commit hash to stream comments for a {@code RANGE} or
          {@code COMMIT} arbitrary change scope
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: createComment
      description: |-
        Add a new comment.
         <p>
         Comments can be added in a few places by setting different attributes:
         <p>
         General pull request comment:

         <pre>
             {
                 "text": "An insightful general comment on a pull request."
             }
             </pre>

         Reply to a comment:

         <pre>
             {
                 "text": "A measured reply.",
                 "parent": {
                     "id": 1
                 }
             }
             </pre>

         General file comment:

         <pre>
             {
                 "text": "An insightful general comment on a file.",
                 "anchor": {
                     "diffType": "RANGE",
                     "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                     "path": "path/to/file",
                     "srcPath": "path/to/file",
                     "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
                 }
             }
             </pre>

         File line comment:

         <pre>
             {
                 "text": "A pithy comment on a particular line within a file.",
                 "anchor": {
                     "diffType": "COMMIT",
                     "line": 1,
                     "lineType": "CONTEXT",
                     "fileType": "FROM",
                     "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                     "path": "path/to/file",
                     "srcPath": "path/to/file",
                     "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
                 }
             }
             </pre>
         <p>
         For file and line comments, 'path' refers to the path of the file to which the comment should be applied and
         'srcPath' refers to the path the that file used to have (only required for copies and moves). Also,
         fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment
         was added. Finally diffType refers to the type of diff the comment was added on. For backwards compatibility
         purposes if no diffType is provided and no fromHash/toHash pair is provided the diffType will be resolved to
         'EFFECTIVE'. In any other cases the diffType is REQUIRED.
         <p>
         For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to
         the type of diff hunk, which can be:
         <ul>
             <li>'ADDED' - for an added line;</li>
             <li>'REMOVED' - for a removed line; or</li>
             <li>'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>
         </ul>
         'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when
         displaying the diff in a side-by-side way. Currently the supported values are:
         <ul>
             <li>'FROM' - the source file of the diff</li>
             <li>'TO' - the destination file of the diff</li>
         </ul>
         If the current user is not a participant the user is added as a watcher of the pull request.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: PostcreateComment
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCommentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}:
    get:
      summary: getComment
      description: |-
        Retrieves a pull request comment.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: GetgetComment
      parameters:
      - name: commentId
        in: path
        description: the id of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateComment
      description: |-
        Update the text of a comment. Only the user who created a comment may update it.
         <p>
         <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match the
         server's version of the comment or the update will fail. To determine the current version of
         the comment, the comment should be fetched from the server prior to the update. Look for the
         'version' attribute in the returned JSON structure.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: PutupdateComment
      parameters:
      - name: commentId
        in: path
        description: the id of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCommentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: deleteComment
      description: |-
        Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong>
         and above may delete comments created by other users.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request
         targets to call this resource.
      operationId: DeletedeleteComment
      parameters:
      - name: version
        in: query
        description: |-
          The expected version of the comment. This must match the server's version of the comment or
                              the delete will fail. To determine the current version of the comment, the comment should be
                              fetched from the server prior to the delete. Look for the 'version' attribute in the
                              returned JSON structure.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: commentId
        in: path
        description: the id of the comment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullRequestId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes:
    get:
      summary: getChanges
      description: |-
        Retrieve a page of changes made in a specified commit.
         <p>
         <strong>Note:</strong> The implementation will apply a hard cap ({@code page.max.changes}) and it is not
         possible to request subsequent content when that cap is exceeded.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetgetChanges
      parameters:
      - name: since
        in: query
        description: |-
          the commit to which <code>until</code> should be compared to produce a page of changes.
                                If not specified the commit's first parent is assumed (if one exists)
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          {@code true} to apply comment counts in the changes (the default); otherwise, {@code false}
                                to stream changes without comment counts
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: commitId
        in: path
        description: the commit to retrieve changes for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/users:
    get:
      summary: getUsers
      description: "Retrieve a page of users, optionally run through provided filters.\n\
        \ <p>\n Only authenticated users may call this resource.\n\n <h3>Supported\
        \ Filters</h3>\n <p>\n Filters are provided in query parameters in a standard\
        \ <code>name=value</code> fashion. The following filters are\n currently supported:\n\
        \ <ul>\n     <li>\n         {@code filter} - return only users, whose username,\
        \ name or email address <i>contain</i> the\n         {@code filter} value\n\
        \     </li>\n     <li>\n         {@code group} - return only users who are\
        \ members of the given group\n     </li>\n     <li>\n         {@code permission}\
        \ - the \"root\" of a permission filter, whose value must be a valid global,\n\
        \         project, or repository permission. Additional filter parameters\
        \ referring to this filter that specify the\n         resource (project or\
        \ repository) to apply the filter to must be prefixed with <code>permission.</code>.\
        \ See the\n         section \"Permission Filters\" below for more details.\n\
        \     </li>\n     <li>\n         {@code permission.N} - the \"root\" of a\
        \ single permission filter, similar to the {@code permission}\n         parameter,\
        \ where \"N\" is a natural number starting from 1. This allows clients to\
        \ specify multiple permission\n         filters, by providing consecutive\
        \ filters as {@code permission.1}, {@code permission.2} etc. Note that\n \
        \        the filters numbering has to start with 1 and be continuous for all\
        \ filters to be processed. The total allowed\n         number of permission\
        \ filters is 50 and all filters exceeding that limit will be dropped. See\
        \ the section\n         \"Permission Filters\" below for more details on how\
        \ the permission filters are processed.\n     </li>\n </ul>\n \n\n <h3>Permission\
        \ Filters</h3>\n <p>\n The following three sub-sections list parameters supported\
        \ for permission filters (where <code>[root]</code> is\n the root permission\
        \ filter name, e.g. {@code permission}, {@code permission.1} etc.) depending\
        \ on the\n permission resource. The system determines which filter to apply\
        \ (Global, Project or Repository permission)\n based on the <code>[root]</code>\
        \ permission value. E.g. {@code ADMIN} is a global permission,\n {@code PROJECT_ADMIN}\
        \ is a project permission and {@code REPO_ADMIN} is a repository permission.\
        \ Note\n that the parameters for a given resource will be looked up in the\
        \ order as they are listed below, that is e.g.\n for a project resource, if\
        \ both {@code projectId} and {@code projectKey} are provided, the system will\n\
        \ use {@code projectId} for the lookup.\n <h4>Global permissions</h4>\n <p>\n\
        \ The permission value under <code>[root]</code> is the only required and\
        \ recognized parameter, as global\n permissions do not apply to a specific\
        \ resource.\n <p>\n Example valid filter: <code>permission=ADMIN</code>.\n\
        \ <h4>Project permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies\
        \ the project permission</li>\n     <li><code>[root].projectId</code> - specifies\
        \ the project ID to lookup the project by</li>\n     <li><code>[root].projectKey</code>\
        \ - specifies the project key to lookup the project by</li>\n </ul>\n <p>\n\
        \ Example valid filter: <code>permission.1=PROJECT_ADMIN&permission.1.projectKey=TEST_PROJECT</code>.\n\
        \ <h4>Repository permissions</h4>\n <ul>\n     <li><code>[root]</code>- specifies\
        \ the repository permission</li>\n     <li><code>[root].projectId</code> -\
        \ specifies the repository ID to lookup the repository by</li>\n     <li><code>[root].projectKey</code>\
        \ and <code>[root].repositorySlug</code>- specifies the project key and\n\
        \     repository slug to lookup the repository by; both values <i>need to</i>\
        \ be provided for this look up to be\n     triggered</li>\n </ul>\n Example\
        \ valid filter: <code>permission.2=REPO_ADMIN&permission.2.projectKey=TEST_PROJECT&permission.2.repositorySlug=test_repo</code>."
      operationId: GetgetUsers
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: updateUserDetails1
      description: |-
        Update the currently authenticated user's details. The update will always be applied to the currently
         authenticated user.
      operationId: updateUserDetails1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserDetailsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/users/{userSlug}/avatar.png:
    post:
      summary: uploadAvatar
      description: |-
        Update the avatar for the user with the supplied <strong>slug</strong>.
         <p>
         This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.
         <p>
         There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded
         file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and
         <strong>JPEG</strong> are preferred due to the file size limit.
         <p>
         This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to
         pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the
         value <code>no-check</code>.
         <p>
         An example <a href="http://curl.haxx.se/">curl</a> request to upload an image name 'avatar.png' would be:
         <pre>
         curl -X POST -u username:password -H "X-Atlassian-Token: no-check" http://example.com/rest/api/latest/users/jdoe/avatar.png -F avatar=@avatar.png
         </pre>
         <p>
         Users are always allowed to update their own avatar. To update someone else's avatar the authenticated user must
         have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
         <strong>SYS_ADMIN</strong> user's avatar.
      operationId: PostuploadAvatar
      parameters:
      - name: userSlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
      deprecated: false
    delete:
      summary: deleteAvatar
      description: |-
        Delete the avatar associated to a user.
         <p>
         Users are always allowed to delete their own avatar. To delete someone else's avatar the authenticated user must
         have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
         <strong>SYS_ADMIN</strong> user's avatar.
      operationId: deleteAvatar
      parameters:
      - name: userSlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/users/credentials:
    put:
      summary: updateUserPassword1
      description: Update the currently authenticated user's password.
      operationId: updateUserPassword1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserPasswordRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/users/{userSlug}:
    get:
      summary: getUser
      description: |-
        Retrieve the user matching the supplied <strong>userSlug</strong>.
         <p>
      operationId: getUser
      parameters:
      - name: userSlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/permissions/groups:
    get:
      summary: getGroupsWithAnyPermission
      description: |-
        Retrieve a page of groups that have been granted at least one global permission.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: GetgetGroupsWithAnyPermission1
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForGroups
      description: |-
        Promote or demote a user's global permission level. Available global permissions are:
         <ul>
             <li>LICENSED_USER</li>
             <li>PROJECT_CREATE</li>
             <li>ADMIN</li>
             <li>SYS_ADMIN</li>
         </ul>
         See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Server
         documentation</a> for a detailed explanation of what each permission entails.
         <p>
         The authenticated user must have:
         <ul>
             <li><strong>ADMIN</strong> permission or higher; and</li>
             <li>the permission they are attempting to grant or higher; and</li>
             <li>greater or equal permissions than the current permission level of the group (a user may not demote the
             permission level of a group with higher permissions than them)</li>
         </ul>
         to call this resource. In addition, a user may not demote a group's permission level if their own permission
         level would be reduced as a result.
      operationId: PutsetPermissionForGroups
      parameters:
      - name: permission
        in: query
        description: the permission to grant
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: the names of the groups
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: revokePermissionsForGroup
      description: |-
        Revoke all global permissions for a group.

         <p>
         The authenticated user must have:
         <ul>
             <li><strong>ADMIN</strong> permission or higher; and</li>
             <li>greater or equal permissions than the current permission level of the group (a user may not demote the
             permission level of a group with higher permissions than them)</li>
         </ul>
         to call this resource. In addition, a user may not revoke a group's permissions if their own permission level
         would be reduced as a result.
      operationId: DeleterevokePermissionsForGroup1
      parameters:
      - name: name
        in: query
        description: the name of the group
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/permissions/groups/none:
    get:
      summary: getGroupsWithoutAnyPermission
      description: |-
        Retrieve a page of groups that have no granted global permissions.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: GetgetGroupsWithoutAnyPermission1
      parameters:
      - name: filter
        in: query
        description: if specified only group names containing the supplied string
          will be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/permissions/users:
    get:
      summary: getUsersWithAnyPermission
      description: |-
        Retrieve a page of users that have been granted at least one global permission.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: GetgetUsersWithAnyPermission1
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    put:
      summary: setPermissionForUsers
      description: |-
        Promote or demote the global permission level of a user. Available global permissions are:
         <ul>
             <li>LICENSED_USER</li>
             <li>PROJECT_CREATE</li>
             <li>ADMIN</li>
             <li>SYS_ADMIN</li>
         </ul>
         See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Server
         documentation</a> for a detailed explanation of what each permission entails.
         <p>
         The authenticated user must have:
         <ul>
             <li><strong>ADMIN</strong> permission or higher; and</li>
             <li>the permission they are attempting to grant; and</li>
             <li>greater or equal permissions than the current permission level of the user (a user may not demote the
             permission level of a user with higher permissions than them)</li>
         </ul>
         to call this resource. In addition, a user may not demote their own permission level.
      operationId: PutsetPermissionForUsers
      parameters:
      - name: name
        in: query
        description: the names of the users
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: permission
        in: query
        description: the permission to grant
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: revokePermissionsForUser
      description: |-
        Revoke all global permissions for a user.
         <p>
         The authenticated user must have:
         <ul>
             <li><strong>ADMIN</strong> permission or higher; and</li>
             <li>greater or equal permissions than the current permission level of the user (a user may not demote the
             permission level of a user with higher permissions than them)</li>
         </ul>
         to call this resource. In addition, a user may not demote their own permission level.
      operationId: DeleterevokePermissionsForUser1
      parameters:
      - name: name
        in: query
        description: the name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/permissions/users/none:
    get:
      summary: getUsersWithoutAnyPermission
      description: |-
        Retrieve a page of users that have no granted global permissions.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getUsersWithoutAnyPermission
      parameters:
      - name: filter
        in: query
        description: if specified only user names containing the supplied string will
          be returned
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/watch:
    post:
      summary: watch
      description: |-
        Add the authenticated user as a watcher for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.
      operationId: Postwatch1
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    delete:
      summary: unwatch
      description: |-
        Remove the authenticated user as a watcher for the specified repository.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the repository to call this resource.
      operationId: Deleteunwatch1
      parameters:
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits:
    get:
      summary: getCommits
      description: |-
        Retrieve a page of commits from a given starting commit or "between" two commits. If no explicit commit is
         specified, the tip of the repository's default branch is assumed. commits may be identified by branch or tag
         name or by ID. A path may be supplied to restrict the returned commits to only those which affect that path.
         <p>
         The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this
         resource.
      operationId: GetgetCommits
      parameters:
      - name: followRenames
        in: query
        description: |-
          if <code>true</code>, the commit history of the specified file will be followed past renames.
                                Only valid for a path to a single file.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: ignoreMissing
        in: query
        description: <code>true</code> to ignore missing commits, <code>false</code>
          otherwise
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: merges
        in: query
        description: |-
          if present, controls how merge commits should be filtered. Can be either <code>exclude</code>,
                         to exclude merge commits, <code>include</code>, to include both merge commits and non-merge
                         commits or <code>only</code>, to only return merge commits.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: an optional path to filter commits by
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: since
        in: query
        description: the commit ID or ref (exclusively) to retrieve commits after
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: until
        in: query
        description: the commit ID (SHA1) or ref (inclusively) to retrieve commits
          before
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withCounts
        in: query
        description: optionally include the total number of commits and total number
          of unique authors
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}:
    get:
      summary: getCommit
      description: |-
        Retrieve a single commit <i>identified by its ID</i>>. In general, that ID is a SHA1. <u>From 2.11, ref names
         like "refs/heads/master" are no longer accepted by this resource.</u>
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: getCommit
      parameters:
      - name: path
        in: query
        description: |-
          an optional path to filter the commit by. If supplied the details returned <i>may not</i>
                       be for the specified commit. Instead, starting from the specified commit, they will be the
                       details for the first commit affecting the specified path.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: commitId
        in: path
        description: the commit ID to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff:
    get:
      summary: streamDiff
      description: |-
        Retrieve the diff between two provided revisions.
         <p>
         <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap
         to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event
         that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to
         {@code true} on the {@code "segments"}, {@code "hunks"} and {@code "diffs"} properties, as well as the top-level
         object, in the returned JSON response.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetstreamDiff1234
      parameters:
      - name: autoSrcPath
        in: query
        description: |-
          {@code true} to automatically try to find the source path when it's not provided,
                                {@code false} otherwise. Requires the {@code path} to be provided.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: since
        in: query
        description: the base revision to diff from. If omitted the parent revision
          of the until revision is used
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the source path for the file, if it was copied, moved or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to {@code ignore-all}
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          {@code true} to embed comments in the diff (the default); otherwise {@code false}
                                to stream the diff without comments
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: commitId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path:.*}:
    get:
      summary: streamDiff
      description: |-
        Retrieve the diff between two provided revisions.
         <p>
         <strong>Note:</strong> This resource is currently <i>not paged</i>. The server will internally apply a hard cap
         to the streamed lines, and it is not possible to request subsequent pages if that cap is exceeded. In the event
         that the cap is reached, the diff will be cut short and one or more {@code truncated} flags will be set to
         {@code true} on the {@code "segments"}, {@code "hunks"} and {@code "diffs"} properties, as well as the top-level
         object, in the returned JSON response.
         <p>
         The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this
         resource.
      operationId: GetstreamDiff12345
      parameters:
      - name: autoSrcPath
        in: query
        description: |-
          {@code true} to automatically try to find the source path when it's not provided,
                                {@code false} otherwise. Requires the {@code path} to be provided.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: false
          default: false
      - name: contextLines
        in: query
        description: the number of context lines to include around added/removed lines
          in the diff
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: -1
          default: -1
      - name: since
        in: query
        description: the base revision to diff from. If omitted the parent revision
          of the until revision is used
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: srcPath
        in: query
        description: the source path for the file, if it was copied, moved or renamed
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: whitespace
        in: query
        description: optional whitespace flag which can be set to {@code ignore-all}
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: withComments
        in: query
        description: |-
          {@code true} to embed comments in the diff (the default); otherwise {@code false}
                                to stream the diff without comments
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          example: true
          default: true
      - name: path
        in: path
        description: the path to the file which should be diffed (optional)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commitId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: projectKey
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repositorySlug
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path:.*
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/admin/pull-requests/{scmId}:
    get:
      summary: getMergeConfig
      description: |-
        Retrieve the merge strategies available for this instance.
         <p>
         The user must be authenticated to call this resource.
      operationId: getMergeConfig
      parameters:
      - name: scmId
        in: path
        description: the id of the scm to get strategies for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
    post:
      summary: setMergeConfig
      description: |-
        Update the pull request merge strategies for the context repository.
         <p>
         The authenticated user must have <strong>ADMIN</strong> permission for the context repository to call this
         resource.
         <p>
         Only the strategies provided will be enabled, only one may be set to default
         <p>
         An explicitly set pull request merge strategy configuration can be deleted by POSTing a document with
         an empty "mergeConfig" attribute. i.e:
         <pre>
         {
             "mergeConfig": {
             }
         }
         </pre>
         Upon completion of this request, the effective configuration will be the default configuration.
      operationId: setMergeConfig
      parameters:
      - name: scmId
        in: path
        description: the id of the scm to get strategies for
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setMergeConfigRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
  /api/1.0/markup/preview:
    post:
      summary: preview
      description: |-
        Preview generated HTML for the given markdown content.
         <p>
         Only authenticated users may call this resource.
      operationId: preview
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/previewRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
      deprecated: false
components:
  schemas:
    updateSettingsRequest:
      title: updateSettingsRequest
      type: object
    createBranchRequest:
      title: createBranchRequest
      type: object
    setDefaultBranchRequest:
      title: setDefaultBranchRequest
      type: object
    setMailConfigRequest:
      title: setMailConfigRequest
      type: object
    setSenderAddressRequest:
      title: setSenderAddressRequest
      type: object
    setSettingsRequest:
      title: setSettingsRequest
      type: object
    updateRequest:
      title: updateRequest
      type: object
    createCommentRequest:
      title: createCommentRequest
      type: object
    updateCommentRequest:
      title: updateCommentRequest
      type: object
    assignParticipantRoleRequest:
      title: assignParticipantRoleRequest
      type: object
    updateStatusRequest:
      title: updateStatusRequest
      type: object
    createProjectRequest:
      title: createProjectRequest
      type: object
    updateProjectRequest:
      title: updateProjectRequest
      type: object
    addLabelRequest:
      title: addLabelRequest
      type: object
    createWebhookRequest:
      title: createWebhookRequest
      type: object
    updateWebhookRequest:
      title: updateWebhookRequest
      type: object
    createTaskRequest:
      title: createTaskRequest
      type: object
    updateTaskRequest:
      title: updateTaskRequest
      type: object
    updateUserDetailsRequest:
      title: updateUserDetailsRequest
      type: object
    updateUserPasswordRequest:
      title: updateUserPasswordRequest
      type: object
    renameUserRequest:
      title: renameUserRequest
      type: object
    addUserToGroupRequest:
      title: addUserToGroupRequest
      type: object
    addGroupToUserRequest:
      title: addGroupToUserRequest
      type: object
    addUsersToGroupRequest:
      title: addUsersToGroupRequest
      type: object
    addUserToGroupsRequest:
      title: addUserToGroupsRequest
      type: object
    removeUserFromGroupRequest:
      title: removeUserFromGroupRequest
      type: object
    removeGroupFromUserRequest:
      title: removeGroupFromUserRequest
      type: object
    createRepositoryRequest:
      title: createRepositoryRequest
      type: object
    updateRepositoryRequest:
      title: updateRepositoryRequest
      type: object
    forkRepositoryRequest:
      title: forkRepositoryRequest
      type: object
    createRequest:
      title: createRequest
      type: object
    deleteRequest:
      title: deleteRequest
      type: object
    createTagRequest:
      title: createTagRequest
      type: object
    updatePullRequestSettingsRequest:
      title: updatePullRequestSettingsRequest
      type: object
    previewExportRequest:
      title: previewExportRequest
      type: object
    startExportRequest:
      title: startExportRequest
      type: object
    startImportRequest:
      title: startImportRequest
      type: object
    setMergeConfigRequest:
      title: setMergeConfigRequest
      type: object
    previewRequest:
      title: previewRequest
      type: object
